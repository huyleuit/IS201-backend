CREATE TABLE "Role" (
    role_id INTEGER PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    role_description VARCHAR(255) NOT NULL,
    account_read NUMBER(1) NOT NULL CHECK (account_read IN (0, 1)),
    account_write NUMBER(1) NOT NULL CHECK (account_write IN (0, 1)),
    account_token_read NUMBER(1) NOT NULL CHECK (account_token_read IN (0, 1)),
    account_token_write NUMBER(1) NOT NULL CHECK (account_token_write IN (0, 1)),
    employee_read NUMBER(1) NOT NULL CHECK (employee_read IN (0, 1)),
    employee_write NUMBER(1) NOT NULL CHECK (employee_write IN (0, 1)),
    category_read NUMBER(1) NOT NULL CHECK (category_read IN (0, 1)),
    category_write NUMBER(1) NOT NULL CHECK (category_write IN (0, 1)),
    goods_read NUMBER(1) NOT NULL CHECK (goods_read IN (0, 1)),
    goods_write NUMBER(1) NOT NULL CHECK (goods_write IN (0, 1)),
    shipment_read NUMBER(1) NOT NULL CHECK (shipment_read IN (0, 1)),
    shipment_write NUMBER(1) NOT NULL CHECK (shipment_write IN (0, 1)),
    membership_card_read NUMBER(1) NOT NULL CHECK (membership_card_read IN (0, 1)),
    membership_card_write NUMBER(1) NOT NULL CHECK (membership_card_write IN (0, 1)),
    promotion_read NUMBER(1) NOT NULL CHECK (promotion_read IN (0, 1)),
    promotion_write NUMBER(1) NOT NULL CHECK (promotion_write IN (0, 1)),
    bill_read NUMBER(1) NOT NULL CHECK (bill_read IN (0, 1)),
    bill_write NUMBER(1) NOT NULL CHECK (bill_write IN (0, 1)),
    payment_read NUMBER(1) NOT NULL CHECK (payment_read IN (0, 1)),
    payment_write NUMBER(1) NOT NULL CHECK (payment_write IN (0, 1)),
    bill_details_read NUMBER(1) NOT NULL CHECK (bill_details_read IN (0, 1)),
    bill_details_write NUMBER(1) NOT NULL CHECK (bill_details_write IN (0, 1)),
    import_note_read NUMBER(1) NOT NULL CHECK (import_note_read IN (0, 1)),
    import_note_write NUMBER(1) NOT NULL CHECK (import_note_write IN (0, 1)),
    export_note_read NUMBER(1) NOT NULL CHECK (export_note_read IN (0, 1)),
    export_note_write NUMBER(1) NOT NULL CHECK (export_note_write IN (0, 1))
);
/

CREATE TABLE "Employee" (
	emp_id INTEGER generated by default as identity PRIMARY KEY NOT NULL,
	username VARCHAR2(255 CHAR) unique not null,
	emp_name VARCHAR2(255 CHAR) NOT NULL,
	role_id integer not null,
	gender VARCHAR2(10 CHAR) NOT NULL CHECK (gender in('Nam', 'Ná»¯', 'Khac')),
	address VARCHAR2(255 CHAR) NOT NULL,
	phone VARCHAR2(20 CHAR) NOT NULL,
	salary FLOAT(10),
	kpi INTEGER,
	create_date DATE NOT NULL,
	create_by VARCHAR2(50 CHAR) NOT NULL,
	last_modified_date DATE NOT NULL,
	last_modified_by VARCHAR2(50 CHAR) NOT NULL,
    foreign key (role_id) references "Role"(role_id)
);

CREATE TABLE "Account" (
    username VARCHAR2(255 CHAR) ,
    password VARCHAR2(255 CHAR) NULL,
    emp_id integer null ,
    role_id integer,
    status VARCHAR2(50 CHAR) NOT NULL CHECK (status in ('Active', 'Inactive', 'expired','pw_not_set')),
	salt VARCHAR2(50 CHAR) NULL,
	create_date DATE NOT NULL,
	create_by VARCHAR2(50 CHAR) NOT NULL,
	last_modified_date DATE NOT NULL,
	last_modified_by VARCHAR2(50 CHAR) NOT NULL,
    PRIMARY KEY (username),
    foreign key (emp_id) references "Employee"(emp_id),
    foreign key (role_id) references "Role"(role_id)
);
/
CREATE TABLE "AccountToken" (
	no INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	username VARCHAR2(50 CHAR),
	token VARCHAR2(255 CHAR) NOT NULL,
	expire DATE NOT NULL,
	create_date DATE NOT NULL,
	create_by VARCHAR2(50 CHAR) NOT NULL,
	last_modified_date DATE NOT NULL,
	last_modified_by VARCHAR2(50 CHAR) NOT NULL,
	PRIMARY KEY (no),
	FOREIGN KEY(username) REFERENCES "Account" (username) ON DELETE CASCADE
);
/


CREATE TABLE "Category" (
    category_id Integer generated by default as identity primary key not null,
    category_name varchar2(255) unique not null,
    description varchar2(255) null,
    create_by VARCHAR2(20) not null,
    last_modified_by VARCHAR2(20) not null ,
    create_date DATE NOT NULL,
    last_modified_date DATE NOT NULL
);
/

CREATE TABLE "Goods" (
    goods_id INT generated by default as identity PRIMARY KEY NOT NULL,
    goods_name VARCHAR(255) NOT NULL UNIQUE,
    category_id integer null ,
    create_by VARCHAR2(20) NOT NULL,
    last_modified_by VARCHAR2(20) NOT NULL,
    create_date DATE NOT NULL,
    last_modified_date DATE NOT NULL,
    FOREIGN KEY (category_id) REFERENCES "Category"(category_id)
);
/

create table "Shipment" (
    shipment_id INT generated as identity PRIMARY KEY NOT NULL,
    shipment_name VARCHAR(255) NOT NULL UNIQUE,
    description VARCHAR(255),
    manufacture_date DATE NOT NULL,
    expiration_date DATE,
    quantity int not null,
    good_id integer not null,
    price FLOAT(10) NOT NULL,
    create_by VARCHAR2(20) NOT NULL,
    last_modified_by VARCHAR2(20) NOT NULL,
    create_date DATE NOT NULL,
    last_modified_date DATE NOT NULL,
    foreign key (good_id) references "Goods" (goods_id)
);
/

CREATE TABLE "MembershipCard" (
card_id INT generated by default as identity PRIMARY KEY NOT NULL,
member_name VARCHAR(255) NOT NULL,
date_of_birth DATE NOT NULL,
phone VARCHAR(20) NOT NULL,
email VARCHAR(255),
card_point INT NOT NULL,
card_rank VARCHAR(50) NOT NULL,
start_date DATE NOT NULL,
end_date DATE NOT NULL,
status VARCHAR(50) NOT NULL,
emp_id INT NOT NULL,
FOREIGN KEY (emp_id) REFERENCES "Employee" (emp_id),
constraint status_check check (status in ('Active', 'Inactive', 'expired'))
);

/
CREATE TABLE "Promotion" (
    pro_id INT generated by default as identity PRIMARY KEY NOT NULL,
    pro_name VARCHAR(255) NOT NULL,
    discount float(10) NOT NULL,
    content VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    create_date DATE NOT NULL,
    create_by VARCHAR2(20) NOT NULL,
    last_modified_date DATE NOT NULL,
    last_modified_by VARCHAR2(20) NOT NULL
);

/
CREATE TABLE "Bill" (
bill_id INT generated by default as identity PRIMARY KEY NOT NULL,
emp_id INT NOT NULL,
FOREIGN KEY (emp_id) REFERENCES "Employee" (emp_id),
last_modified_date DATE NOT NULL,
last_modified_by VARCHAR(20) NOT NULL,
create_date DATE NOT NULL,
create_by VARCHAR(20) NOT NULL
);

create table "Payment" (
    payment_id INT generated by default as identity PRIMARY KEY NOT NULL,
    pro_id integer,
    card_id INT,
    bill_id integer unique not null,
    payment_status VARCHAR(50) NOT NULL,
    payment_method VARCHAR(50),
    total FLOAT(10) NOT NULL,
    discounts FLOAT(10),
    actual_payment FLOAT(10),
    received FLOAT(10),
    change FLOAT(10),
    payment_date Date,
    last_modified_date DATE NOT NULL,
    last_modified_by VARCHAR(20) NOT NULL,
    create_date DATE NOT NULL,
    create_by VARCHAR(20) NOT NULL,
    FOREIGN KEY (card_id) REFERENCES "MembershipCard"(card_id),
    FOREIGN KEY (bill_id) REFERENCES "Bill"(bill_id),
    foreign key (pro_id) references "Promotion"(pro_id),
    constraint payment_status_check check (payment_status in ('Success', 'Processing', 'Failed'))
);
/

CREATE TABLE "BillDetails" (
    goods_id INT ,
    SHIPMENT_ID INT ,
    bill_id INT NOT NULL,
    unit_price FLOAT(10),
    quantity INT ,
    total FLOAT(10),
    PRIMARY KEY (goods_id, bill_id),
    FOREIGN KEY (goods_id) REFERENCES "Goods"(goods_id),
    FOREIGN KEY (bill_id) REFERENCES "Bill"(bill_id),
    FOREIGN KEY (shipment_id) REFERENCES "Shipment"(shipment_id)
);

/
CREATE TABLE "ImportNote" (
    import_id INT generated by default as identity PRIMARY KEY NOT NULL,
    import_date DATE NOT NULL,
    quantity INT NOT NULL,
    price FLOAT(10) NOT NULL,
    goods_id INT NOT NULL,
    shipment_id INT NOT NULL,
    create_date DATE NOT NULL,
    create_by VARCHAR(20) NOT NULL,
    last_modified_date DATE NOT NULL,
    last_modified_by VARCHAR(20) NOT NULL,
    FOREIGN KEY (goods_id) REFERENCES "Goods"(goods_id),
    FOREIGN KEY (shipment_id) REFERENCES "Shipment"(shipment_id)
)
/

CREATE TABLE "ExportNote" (
    export_id INT generated by default as identity PRIMARY KEY NOT NULL,
    export_date DATE NOT NULL,
    create_date DATE NOT NULL,
    create_by VARCHAR(20) NOT NULL,
    last_modified_date DATE NOT NULL,
    last_modified_by VARCHAR(20) NOT NULL,
    quantity INT NOT NULL,
    price FLOAT(10) NOT NULL,
    goods_id INT NOT NULL,
    shipment_id INT NOT NULL,
FOREIGN KEY (goods_id) REFERENCES "Goods"(goods_id),
FOREIGN KEY (shipment_id) REFERENCES "Shipment"(shipment_id)
)
